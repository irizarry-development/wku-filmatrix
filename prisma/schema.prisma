datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String     @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?    @db.Text
  access_token       String?    @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?    @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              String      @id @default(cuid())
  sessionToken    String      @unique
  userId          String
  expires         DateTime
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HomepageLink {
  id            String      @id @default(cuid())
  category      String
  name          String
  url           String
  
  @@unique([category, name])
}

model User {
  id                        String      @id @default(cuid())

  // Auth
  email                     String?     @unique
  saltedPassword            String
  role                      Int         @default(2)

  // User Profile
  name                      String?
  outgoingEmail             String?
  emailVerified             DateTime?
  image                     String?
  biography                 String?
  degree                    String?
  classYear                 String?
  hasOnboarded              Boolean     @default(false)
  phoneNumber               String?
  address                   String?
  position                  String?
  credit                    String?
  allergies                 String?
  medications               String?
  conditions                String?

  // Emergency Contact
  emergencyContactName      String?
  emergencyContactPhone     String?
  emergencyContactAddress   String?

  // Relations
  accounts                  Account[]
  sessions                  Session[]
  crewOf                    Crew[]
  approvals                 ProjectTodo[]
}

model Location {
  id                    String    @id @default(cuid())
  locationName          String    @unique
  locationAddress       String
  locationKeywords      String
  locationDescription   String
  locationPhone         String
  locationEmail         String
  locationContactName   String

  media         LocationMedia[]
  projects      Project[]
}

model LocationMedia {
  id            String      @id @default(cuid())
  location      Location    @relation(fields: [locationId], references: [id])
  locationId    String
  url           String
}

model Vendor {
  id                    String     @id @default(cuid())
  vendorName            String     @unique
  vendorAddress         String
  vendorKeywords        String
  vendorDescription     String
  vendorPhone           String
  vendorEmail           String
  vendorContactName     String

  projects      Project[]
}

model Project {
  id                          String    @id @default(cuid())
  projectName                 String    @unique
  projectDescription          String?
  projectRuntime              String?
  projectAspectRatio          String?
  projectRating               String?
  projectRatingCriteria       String?
  projectProductionNumber     String    @unique
  projectCategory             String?
  projectGenre                String?
  projectLanguage             String?
  projectShootingFormat       String?
  projectFilmSound            String?
  projectFilmSubtitled        Boolean   @default(false)
  projectTagline              String?
  projectLogLine              String?
  project25WordPitch          String?
  project50WordPitch          String?
  project75WordPitch          String?

  media       ProjectMedia[]
  locations   Location[]
  vendors     Vendor[]
  crew        Crew[]
  cast        Cast[]
  todos       ProjectTodo[]
  festivals   Festival[]
}

model ProjectMedia {
  id            String      @id @default(cuid())
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String
  url           String
}

model Crew {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String

  category      String
  role          String

  @@unique([userId, projectId])
}

model Actor {
  id            String    @id @default(cuid())
  name          String
  image         String?
  email         String?
  phone         String?

  projects      Cast[]
}

model Cast {
  id            String      @id @default(cuid())
  actor         Actor       @relation(fields: [actorId], references: [id])
  actorId       String
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String

  role          String
  type          String

  @@unique([actorId, projectId])
}

model ProjectTodo {
  id            String      @id @default(cuid())
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String

  name          String
  category      String
  complete      Boolean     @default(false)
  approvedDT    DateTime?
  approver      User?       @relation(fields: [approverId], references: [id])
  approverId    String?
  approverName  String?
}

model Festival {
  id                String      @id @default(cuid())
  project           Project     @relation(fields: [projectId], references: [id])
  projectId         String

  name              String
  fflink            String?
  strategy          String?
  email             String?
  status            String?
  deadline          DateTime?
  earlyDeadline     DateTime?
  submitted         DateTime?
}

model VerificationToken {
  identifier  String
  token       String        @unique
  expires     DateTime

  @@unique([identifier, token])
}
